// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: coin.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoinService_Paginate_FullMethodName    = "/coin.CoinService/Paginate"
	CoinService_GetByIds_FullMethodName    = "/coin.CoinService/GetByIds"
	CoinService_GetById_FullMethodName     = "/coin.CoinService/GetById"
	CoinService_GetBySymbol_FullMethodName = "/coin.CoinService/GetBySymbol"
)

// CoinServiceClient is the client API for CoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinServiceClient interface {
	Paginate(ctx context.Context, in *CoinQueryRequest, opts ...grpc.CallOption) (*CoinPaginate, error)
	GetByIds(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CoinList, error)
	GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Coin, error)
	GetBySymbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*Coin, error)
}

type coinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinServiceClient(cc grpc.ClientConnInterface) CoinServiceClient {
	return &coinServiceClient{cc}
}

func (c *coinServiceClient) Paginate(ctx context.Context, in *CoinQueryRequest, opts ...grpc.CallOption) (*CoinPaginate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoinPaginate)
	err := c.cc.Invoke(ctx, CoinService_Paginate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) GetByIds(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CoinList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoinList)
	err := c.cc.Invoke(ctx, CoinService_GetByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Coin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Coin)
	err := c.cc.Invoke(ctx, CoinService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) GetBySymbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*Coin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Coin)
	err := c.cc.Invoke(ctx, CoinService_GetBySymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinServiceServer is the server API for CoinService service.
// All implementations must embed UnimplementedCoinServiceServer
// for forward compatibility.
type CoinServiceServer interface {
	Paginate(context.Context, *CoinQueryRequest) (*CoinPaginate, error)
	GetByIds(context.Context, *IdsRequest) (*CoinList, error)
	GetById(context.Context, *IdRequest) (*Coin, error)
	GetBySymbol(context.Context, *SymbolRequest) (*Coin, error)
	mustEmbedUnimplementedCoinServiceServer()
}

// UnimplementedCoinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoinServiceServer struct{}

func (UnimplementedCoinServiceServer) Paginate(context.Context, *CoinQueryRequest) (*CoinPaginate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedCoinServiceServer) GetByIds(context.Context, *IdsRequest) (*CoinList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIds not implemented")
}
func (UnimplementedCoinServiceServer) GetById(context.Context, *IdRequest) (*Coin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCoinServiceServer) GetBySymbol(context.Context, *SymbolRequest) (*Coin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySymbol not implemented")
}
func (UnimplementedCoinServiceServer) mustEmbedUnimplementedCoinServiceServer() {}
func (UnimplementedCoinServiceServer) testEmbeddedByValue()                     {}

// UnsafeCoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinServiceServer will
// result in compilation errors.
type UnsafeCoinServiceServer interface {
	mustEmbedUnimplementedCoinServiceServer()
}

func RegisterCoinServiceServer(s grpc.ServiceRegistrar, srv CoinServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoinService_ServiceDesc, srv)
}

func _CoinService_Paginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).Paginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_Paginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).Paginate(ctx, req.(*CoinQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_GetByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetByIds(ctx, req.(*IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_GetBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetBySymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetBySymbol(ctx, req.(*SymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinService_ServiceDesc is the grpc.ServiceDesc for CoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coin.CoinService",
	HandlerType: (*CoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paginate",
			Handler:    _CoinService_Paginate_Handler,
		},
		{
			MethodName: "GetByIds",
			Handler:    _CoinService_GetByIds_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CoinService_GetById_Handler,
		},
		{
			MethodName: "GetBySymbol",
			Handler:    _CoinService_GetBySymbol_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}
